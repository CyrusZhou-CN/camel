[
  [
    "from typing import List\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n        for idx, elem in enumerate(numbers):\n            for idx2 in range(idx + 1, len(numbers)):\n                distance = abs(elem - numbers[idx2])\n                if distance < threshold:\n                    return True\n\n        return False"
  ],
  [
    "from typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n        result = []\n        current_string = []\n        current_depth = 0\n\n        for c in paren_string.replace(\" \", \"\"):  # Ignore spaces\n            if c == '(':\n                current_depth += 1\n                current_string.append(c)\n            elif c == ')':\n                current_depth -= 1\n                current_string.append(c)\n\n                if current_depth == 0:\n                    result.append(''.join(current_string))\n                    current_string.clear()\n\n        return result"
  ],
  [
    "\n\ndef truncate_number(number: float) -> float:\n        return number - int(number)"
  ],
  [
    "from typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n        balance = 0\n\n        for op in operations:\n            balance += op\n            if balance < 0:\n                return True\n\n        return False"
  ],
  [
    "from typing import List\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n        mean = sum(numbers) / len(numbers)\n        return sum(abs(x - mean) for x in numbers) / len(numbers)"
  ]
]